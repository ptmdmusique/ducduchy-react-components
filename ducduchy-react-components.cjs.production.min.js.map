{"version":3,"file":"ducduchy-react-components.cjs.production.min.js","sources":["../src/components/Icon/Icon.tsx","../src/components/Button/Button.tsx","../src/utils/lodash/now.ts","../src/components/resources/animation.ts","../src/utils/lodash/debounce.ts","../src/components/animation/CustomTransition.tsx","../src/components/Input/Input.tsx","../src/utils/iconInit.ts","../src/components/Badge/Badge.tsx","../src/components/RadioGroup/RadioGroup.tsx","../src/utils/math.ts","../src/index.tsx"],"sourcesContent":["import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  FontAwesomeIcon,\n  FontAwesomeIconProps,\n} from \"@fortawesome/react-fontawesome\";\nimport cx from \"classnames\";\nimport { forwardRef } from \"react\";\nimport { OmitStrict } from \"../../utils/types\";\nimport React from \"react\";\n\ninterface IconInfo {\n  icon: [string, string];\n  className?: string;\n}\n\nexport const Icon = forwardRef<\n  HTMLDivElement,\n  Partial<OmitStrict<FontAwesomeIconProps, \"icon\" | \"cx\">> & IconInfo\n>(({ icon, className, ...faProps }, ref) => (\n  <div ref={ref} className={cx(\"icon\", className)}>\n    <FontAwesomeIcon {...faProps} icon={icon as IconProp} />\n  </div>\n));\n\nexport default Icon;\n","import cx from \"classnames\";\nimport React, { forwardRef } from \"react\";\nimport Icon from \"../Icon/Icon\";\nimport { StatusType } from \"../resources/common.data\";\nimport \"./Button.scss\";\n\nexport interface ButtonProps extends React.HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  borderType?: \"outline\" | \"fill\" | \"plain\";\n  colorType?: StatusType;\n  icon?: [string, string];\n  iconClassName?: string;\n  isLoading?: boolean;\n  isRounded?: boolean;\n  withBackground?: boolean;\n  loadingIcon?: [string, string];\n  ref?: React.ForwardedRef<HTMLButtonElement>;\n}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      borderType = \"fill\",\n      icon,\n      colorType = \"normal\",\n      iconClassName,\n      isLoading,\n      isRounded,\n      withBackground,\n      loadingIcon,\n      ...buttonProps\n    },\n    ref,\n  ) => {\n    return (\n      <button\n        {...buttonProps}\n        ref={ref}\n        className={cx(\n          `btn--${borderType}`,\n          `btn--${colorType}`,\n          { \"btn--rounded\": isRounded, \"btn--with-background\": withBackground },\n          buttonProps.className,\n        )}\n      >\n        {!isLoading ? (\n          <>\n            {icon && (\n              <Icon\n                icon={icon}\n                className={cx(\n                  \"fa-fw\",\n                  \"btn-icon\",\n                  { \"btn-icon--with-children\": !!buttonProps.children },\n                  iconClassName,\n                )}\n              />\n            )}\n            {buttonProps.children}\n          </>\n        ) : (\n          <Icon icon={loadingIcon ?? [\"fas\", \"spinner\"]} spin />\n        )}\n      </button>\n    );\n  },\n);\n","/**\r\n * Gets the timestamp of the number of milliseconds that have elapsed since\r\n * the Unix epoch (1 January 1970 00:00:00 UTC).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 2.4.0\r\n * @category Date\r\n * @returns {number} Returns the timestamp.\r\n * @example\r\n *\r\n * _.defer(function(stamp) {\r\n *   console.log(_.now() - stamp);\r\n * }, _.now());\r\n * // => Logs the number of milliseconds it took for the deferred invocation.\r\n */\r\nexport const now = (): number => new Date().getTime();\r\n","export const headlessTransitionData = {\r\n  fadeInOut: {\r\n    enter: \"transition-opacity duration-75\",\r\n    enterFrom: \"opacity-0\",\r\n    enterTo: \"opacity-100\",\r\n    leave: \"transition-opacity duration-150\",\r\n    leaveFrom: \"opacity-100\",\r\n    leaveTo: \"opacity-0\",\r\n  },\r\n  fadeAndSlide: {\r\n    enter: \"transition duration-75 transform\",\r\n    enterFrom: \"opacity-0 translate-y-full\",\r\n    enterTo: \"opacity-100 translate-y-0\",\r\n    leave: \"transition duration-150 transform\",\r\n    leaveFrom: \"opacity-100 translate-y-0\",\r\n    leaveTo: \"opacity-0 translate-y-full\",\r\n  },\r\n};\r\n","// Lodash debounce --- https://www.jsdelivr.com/package/npm/lodash\r\n\r\nimport { now } from \"./now\";\r\n\r\nconst FUNC_ERROR_TEXT = \"Argument func is not a function\";\r\n\r\nconst nativeMax = Math.max;\r\nconst nativeMin = Math.min;\r\n\r\ninterface DebounceSettings {\r\n  leading?: boolean | undefined;\r\n  maxWait?: number | undefined;\r\n  trailing?: boolean | undefined;\r\n}\r\n\r\ninterface DebouncedFunc<T extends (...args: any[]) => any> {\r\n  /**\r\n   * Call the original function, but applying the debounce rules.\r\n   *\r\n   * If the debounced function can be run immediately, this calls it and returns its return\r\n   * value.\r\n   *\r\n   * Otherwise, it returns the return value of the last invocation, or undefined if the debounced\r\n   * function was not invoked yet.\r\n   */\r\n  (...args: Parameters<T>): ReturnType<T> | undefined;\r\n\r\n  /**\r\n   * Throw away any pending invocation of the debounced function.\r\n   */\r\n  cancel(): void;\r\n\r\n  /**\r\n   * If there is a pending invocation of the debounced function, invoke it immediately and return\r\n   * its return value.\r\n   *\r\n   * Otherwise, return the value from the last invocation, or undefined if the debounced function\r\n   * was never invoked.\r\n   */\r\n  flush(): ReturnType<T> | undefined;\r\n}\r\n\r\nexport function debounce<T extends (...args: any) => any>(\r\n  func: T,\r\n  wait: number = 0,\r\n  options?: DebounceSettings,\r\n): DebouncedFunc<T> {\r\n  let lastArgs: IArguments | undefined;\r\n  let lastThis: IArguments | undefined;\r\n  let maxWait = -1;\r\n  let result: ReturnType<T>;\r\n  let timerId: NodeJS.Timeout | undefined;\r\n  let lastCallTime: number | undefined;\r\n  let lastInvokeTime = 0;\r\n  let leading = false;\r\n  let maxing = false;\r\n  let trailing = true;\r\n\r\n  if (typeof func !== \"function\") {\r\n    throw new TypeError(FUNC_ERROR_TEXT);\r\n  }\r\n\r\n  if (options) {\r\n    leading = !!options.leading;\r\n    maxing = \"maxWait\" in options;\r\n    maxWait = maxing ? nativeMax(Number(options.maxWait) || 0, wait) : maxWait;\r\n    trailing = \"trailing\" in options ? !!options.trailing : trailing;\r\n  }\r\n\r\n  function invokeFunc(time: number) {\r\n    const args = lastArgs,\r\n      thisArg = lastThis;\r\n\r\n    lastArgs = lastThis = undefined;\r\n    lastInvokeTime = time;\r\n    // @ts-ignore\r\n    result = func.apply(thisArg, args!);\r\n    return result;\r\n  }\r\n\r\n  function leadingEdge(time: number) {\r\n    // Reset any `maxWait` timer.\r\n    lastInvokeTime = time;\r\n    // Start the timer for the trailing edge.\r\n    timerId = setTimeout(timerExpired, wait);\r\n    // Invoke the leading edge.\r\n    return leading ? invokeFunc(time) : result;\r\n  }\r\n\r\n  function remainingWait(time: number) {\r\n    const timeSinceLastCall = time - (lastCallTime || 0),\r\n      timeSinceLastInvoke = time - lastInvokeTime,\r\n      timeWaiting = wait - timeSinceLastCall;\r\n\r\n    return maxing\r\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\r\n      : timeWaiting;\r\n  }\r\n\r\n  function shouldInvoke(time: number) {\r\n    const timeSinceLastCall = time - (lastCallTime || 0),\r\n      timeSinceLastInvoke = time - lastInvokeTime;\r\n\r\n    // Either this is the first call, activity has stopped and we're at the\r\n    // trailing edge, the system time has gone backwards and we're treating\r\n    // it as the trailing edge, or we've hit the `maxWait` limit.\r\n    return (\r\n      lastCallTime === undefined ||\r\n      timeSinceLastCall >= wait ||\r\n      timeSinceLastCall < 0 ||\r\n      (maxing && timeSinceLastInvoke >= maxWait)\r\n    );\r\n  }\r\n\r\n  function timerExpired() {\r\n    const time = now();\r\n    if (shouldInvoke(time)) {\r\n      return trailingEdge(time);\r\n    }\r\n    // Restart the timer.\r\n    timerId = setTimeout(timerExpired, remainingWait(time));\r\n  }\r\n\r\n  function trailingEdge(time: number) {\r\n    timerId = undefined;\r\n\r\n    // Only invoke if we have `lastArgs` which means `func` has been\r\n    // debounced at least once.\r\n    if (trailing && lastArgs) {\r\n      return invokeFunc(time);\r\n    }\r\n    lastArgs = lastThis = undefined;\r\n    return result;\r\n  }\r\n\r\n  function cancel() {\r\n    if (timerId !== undefined) {\r\n      clearTimeout(timerId);\r\n    }\r\n    lastInvokeTime = 0;\r\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\r\n  }\r\n\r\n  function flush() {\r\n    return timerId === undefined ? result : trailingEdge(now());\r\n  }\r\n\r\n  function debounced() {\r\n    const time = now(),\r\n      isInvoking = shouldInvoke(time);\r\n\r\n    lastArgs = arguments;\r\n    // @ts-ignore\r\n    lastThis = this;\r\n    lastCallTime = time;\r\n\r\n    if (isInvoking) {\r\n      if (timerId === undefined) {\r\n        return leadingEdge(lastCallTime);\r\n      }\r\n      if (maxing) {\r\n        // Handle invocations in a tight loop.\r\n        clearTimeout(timerId);\r\n        timerId = setTimeout(timerExpired, wait);\r\n        return invokeFunc(lastCallTime);\r\n      }\r\n    }\r\n    if (timerId === undefined) {\r\n      timerId = setTimeout(timerExpired, wait);\r\n    }\r\n    return result;\r\n  }\r\n  debounced.cancel = cancel;\r\n  debounced.flush = flush;\r\n  return debounced;\r\n}\r\n","import { Transition } from \"@headlessui/react\";\r\nimport { FC, Fragment } from \"react\";\r\nimport { headlessTransitionData } from \"../resources/animation\";\r\nimport React from \"react\";\r\n\r\ntype TransitionProp = FC<{\r\n  show: boolean;\r\n  as?: React.ElementType<any>;\r\n  className?: string;\r\n}>;\r\n\r\nexport const FadeTransition: TransitionProp = ({\r\n  show,\r\n  children,\r\n  className,\r\n  as = Fragment,\r\n}) => (\r\n  <Transition\r\n    as={as}\r\n    show={show}\r\n    className={className}\r\n    {...headlessTransitionData.fadeInOut}\r\n  >\r\n    {children}\r\n  </Transition>\r\n);\r\n\r\nexport const FadeAndSlideTransition: TransitionProp = ({\r\n  show,\r\n  children,\r\n  as = Fragment,\r\n  className,\r\n}) => (\r\n  <Transition\r\n    as={as}\r\n    show={show}\r\n    className={className}\r\n    {...headlessTransitionData.fadeAndSlide}\r\n  >\r\n    {children}\r\n  </Transition>\r\n);\r\n","import cx from \"classnames\";\r\nimport { nanoid } from \"nanoid\";\r\nimport React, {\r\n  ChangeEvent,\r\n  forwardRef,\r\n  InputHTMLAttributes,\r\n  ReactNode,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { debounce } from \"../../utils/lodash/debounce\";\r\nimport { FadeTransition } from \"../animation/CustomTransition\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport { FormAdornment } from \"../resources/form/types\";\r\nimport \"./Input.scss\";\r\n\r\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n  borderType?: \"fill\" | \"outline\" | \"plain\";\r\n  caption?: ReactNode;\r\n  captionIcon?: [string, string];\r\n  state?: \"normal\" | \"error\";\r\n  label?: string;\r\n  leadingAdornment?: FormAdornment;\r\n  leadingAdornmentOnClick?: () => void;\r\n  trailingAdornment?: FormAdornment;\r\n  traillingAdornmentOnClick?: () => void;\r\n\r\n  debounceParam?: {\r\n    /** in millisecond */\r\n    debounceTime: number;\r\n    flushOnUnmount?: boolean;\r\n  };\r\n}\r\n\r\nconst checkIsIcon = (prop: FormAdornment): prop is [string, string] => {\r\n  return (\r\n    Array.isArray(prop) &&\r\n    prop.length === 2 &&\r\n    prop.every((entry) => typeof entry === \"string\")\r\n  );\r\n};\r\n\r\nexport const Input = forwardRef<HTMLInputElement, InputProps>(\r\n  (\r\n    {\r\n      borderType = \"outline\",\r\n      caption,\r\n      captionIcon,\r\n      state,\r\n      label,\r\n      leadingAdornment,\r\n      leadingAdornmentOnClick,\r\n      trailingAdornment,\r\n      traillingAdornmentOnClick,\r\n      debounceParam,\r\n      className,\r\n      ...inputProps\r\n    },\r\n    ref,\r\n  ) => {\r\n    const myId = useRef(`input---${nanoid()}`);\r\n    const hasError = state === \"error\";\r\n\r\n    const debounceRef = useRef(\r\n      debounce((event: ChangeEvent<HTMLInputElement>) => {\r\n        inputProps?.onChange?.(event);\r\n      }, debounceParam?.debounceTime ?? 0),\r\n    );\r\n\r\n    const [hasContent, setHasContent] = useState(false);\r\n\r\n    const renderAdornment = (adornment?: FormAdornment, left = false) => {\r\n      if (!adornment) {\r\n        return null;\r\n      }\r\n\r\n      const iconCN = cx(\"fa-fw adornment-icon\", {\r\n        \"adornment-icon-left\": left,\r\n      });\r\n\r\n      let onClick = traillingAdornmentOnClick;\r\n      if (left) {\r\n        onClick = leadingAdornmentOnClick;\r\n      }\r\n\r\n      if (checkIsIcon(adornment)) {\r\n        const renderIcon = () => <Icon icon={adornment} className={iconCN} />;\r\n        return onClick ? (\r\n          <button className=\"adornment-wrapper\" type=\"button\" onClick={onClick}>\r\n            {renderIcon()}\r\n          </button>\r\n        ) : (\r\n          renderIcon()\r\n        );\r\n      }\r\n\r\n      return <div className={iconCN}>{adornment}</div>;\r\n    };\r\n\r\n    const onInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n      setHasContent(\r\n        inputProps?.placeholder != null || event.target.value != null,\r\n      );\r\n      debounceRef.current(event);\r\n    };\r\n\r\n    useEffect(() => {\r\n      setHasContent(\r\n        inputProps?.value != null ||\r\n          inputProps?.defaultValue != null ||\r\n          inputProps?.placeholder != null,\r\n      );\r\n    }, [inputProps?.value, inputProps?.placeholder, inputProps?.defaultValue]);\r\n\r\n    useEffect(() => {\r\n      const debouncer = debounceRef.current;\r\n      return () => {\r\n        if (debounceParam) {\r\n          if (debounceParam.flushOnUnmount) {\r\n            debouncer.flush();\r\n          } else {\r\n            debouncer.cancel();\r\n          }\r\n        }\r\n      };\r\n    }, [debounceParam]);\r\n\r\n    return (\r\n      <div className={cx(\"form-input\", className)}>\r\n        <div\r\n          className={cx(\r\n            \"input-container\",\r\n            `input-container--${borderType}`,\r\n            { \"input-container--error\": hasError },\r\n            { \"input-container--has-content\": hasContent },\r\n            { \"input-container--with-leading-icon\": leadingAdornment },\r\n            { \"input-container--with-trailing-icon\": trailingAdornment },\r\n            { \"input-container--read-only\": inputProps?.readOnly },\r\n          )}\r\n        >\r\n          {renderAdornment(trailingAdornment)}\r\n          {renderAdornment(leadingAdornment, true)}\r\n          <label htmlFor={myId.current}>{label}</label>\r\n          <input\r\n            id={myId.current}\r\n            {...inputProps}\r\n            ref={ref}\r\n            onChange={onInputChange}\r\n          />\r\n        </div>\r\n\r\n        <FadeTransition show={!!caption}>\r\n          <div\r\n            className={cx(\"caption-container\", {\r\n              \"caption-container--error\": hasError,\r\n            })}\r\n          >\r\n            {(hasError || captionIcon) && (\r\n              <Icon\r\n                icon={captionIcon || [\"far\", \"info-circle\"]}\r\n                className=\"fa-fw icon\"\r\n              />\r\n            )}\r\n            {caption}\r\n          </div>\r\n        </FadeTransition>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCat } from \"@fortawesome/free-solid-svg-icons/faCat\";\nimport { faDog } from \"@fortawesome/free-solid-svg-icons/faDog\";\nimport { faHandPeace } from \"@fortawesome/free-solid-svg-icons/faHandPeace\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons/faSpinner\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons/faHeart\";\n\nexport const initializeIconList = () => {\n  const iconList = [faHandPeace, faDog, faCat, faSpinner, faHeart];\n\n  // Set up icon libraries\n  library.add(...iconList);\n};\n","import cx from \"classnames\";\r\nimport React from \"react\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport { StatusType } from \"../resources/common.data\";\r\nimport \"./Badge.scss\";\r\n\r\nexport interface BadgeProps {\r\n  status?: StatusType;\r\n  className?: string;\r\n  type?: \"outline\" | \"filled\";\r\n\r\n  icon?: [string, string];\r\n  iconClassName?: string;\r\n\r\n  text: string;\r\n}\r\n\r\nexport const Badge = ({\r\n  icon,\r\n  text,\r\n  status = \"info\",\r\n  type = \"filled\",\r\n  iconClassName,\r\n  className,\r\n}: BadgeProps) => {\r\n  return (\r\n    <div\r\n      className={cx(\"badge\", `badge--${status}`, `badge--${type}`, className)}\r\n    >\r\n      {icon && <Icon icon={icon} className={cx(\"fa-fw\", iconClassName)} />}\r\n      <p>{text}</p>\r\n    </div>\r\n  );\r\n};\r\n","import { RadioGroup as HeadlessRadioGroup } from \"@headlessui/react\";\r\nimport cx from \"classnames\";\r\nimport React, { ReactNode, useEffect, useMemo, useState } from \"react\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport { clamp } from \"../../utils/math\";\r\nimport { StatusType } from \"../resources/common.data\";\r\nimport { FormValidationWithController } from \"../resources/form/types\";\r\nimport \"./RadioGroup.scss\";\r\n\r\ntype ValueType = number | string;\r\ntype GetFunction<D> = (props: {\r\n  data: D;\r\n  index: number;\r\n  checked: boolean;\r\n  active: boolean;\r\n  disabled: boolean;\r\n}) => ReactNode;\r\n\r\nexport interface RadioGroupProps<\r\n  Data = unknown[],\r\n  Value extends ValueType = any,\r\n  Form = any,\r\n> {\r\n  className?: string;\r\n  itemClassName?: string;\r\n  itemClassNameGetter?: (item: Data, index: number) => string;\r\n\r\n  dataList: Data[];\r\n  defaultSelectedIndex?: number;\r\n  selectedIndex?: number;\r\n  getValue: (data: Data) => Value;\r\n  checkOptionDisable?: (data: Data, index: number) => boolean | undefined;\r\n  onChange?: (data: Data, index: number) => void;\r\n  disabled?: boolean;\r\n\r\n  radioGroupLabel?: ReactNode;\r\n  renderOption?: GetFunction<Data>;\r\n  getLabel?: GetFunction<Data>;\r\n  getDescription?: GetFunction<Data>;\r\n  leftLabel?: boolean;\r\n\r\n  formValidation?: FormValidationWithController<Form>;\r\n\r\n  status?: StatusType;\r\n}\r\n\r\nexport function RadioGroup<Data, Value extends ValueType, Form>({\r\n  className,\r\n  itemClassName,\r\n  itemClassNameGetter,\r\n  dataList,\r\n  getValue,\r\n  radioGroupLabel,\r\n  defaultSelectedIndex = -1,\r\n  selectedIndex,\r\n  disabled,\r\n  renderOption,\r\n  onChange,\r\n  checkOptionDisable,\r\n  getLabel,\r\n  getDescription,\r\n  leftLabel,\r\n  formValidation,\r\n  status = \"neutral\",\r\n}: RadioGroupProps<Data, Value, Form>) {\r\n  const [_selectedIndex, setSelectedIndex] = useState(\r\n    (() => {\r\n      let attemptDefaultIndex = clamp(\r\n        -1,\r\n        dataList.length - 1,\r\n        selectedIndex ?? defaultSelectedIndex,\r\n      );\r\n\r\n      if (\r\n        attemptDefaultIndex > -1 &&\r\n        checkOptionDisable?.(dataList[attemptDefaultIndex], attemptDefaultIndex)\r\n      ) {\r\n        attemptDefaultIndex = dataList.findIndex(\r\n          (entry, index) => !checkOptionDisable?.(entry, index) ?? true,\r\n        );\r\n      }\r\n\r\n      return attemptDefaultIndex;\r\n    })(),\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (selectedIndex !== undefined) {\r\n      setSelectedIndex(\r\n        selectedIndex >= 0 && selectedIndex < dataList.length\r\n          ? selectedIndex\r\n          : -1,\r\n      );\r\n    }\r\n  }, [selectedIndex, dataList.length]);\r\n\r\n  const dataMap = useMemo(() => {\r\n    // @ts-ignore\r\n    const returnMap: Record<Value, { data: Data; index: number }> = {};\r\n    dataList.forEach((entry, index) => {\r\n      returnMap[getValue(entry)] = { data: entry, index };\r\n    });\r\n\r\n    return returnMap;\r\n  }, [dataList, getValue]);\r\n\r\n  const value =\r\n    _selectedIndex > -1 && _selectedIndex < dataList.length\r\n      ? getValue(dataList[_selectedIndex])\r\n      : undefined;\r\n\r\n  const renderContent = (formOnChange?: (...data: any[]) => void) => {\r\n    const onChangeWrapper = (newValue: Value) => {\r\n      const { data, index } = dataMap[newValue] || {};\r\n      if (selectedIndex === undefined) {\r\n        // Change on uncontrolled form only\r\n        setSelectedIndex(index);\r\n      }\r\n\r\n      onChange?.(data, index);\r\n      formOnChange?.(getValue(data));\r\n    };\r\n\r\n    const renderRadioLabel = (label: ReactNode) => (\r\n      <HeadlessRadioGroup.Label\r\n        className={cx(\"radio-label\", { \"radio-label--left\": leftLabel })}\r\n      >\r\n        {label}\r\n      </HeadlessRadioGroup.Label>\r\n    );\r\n\r\n    return (\r\n      <HeadlessRadioGroup\r\n        disabled={disabled}\r\n        defaultValue={value}\r\n        value={value}\r\n        onChange={onChangeWrapper}\r\n        className={cx(\r\n          \"form-radio-group-container\",\r\n          { \"form-radio-group-container--disabled\": disabled },\r\n          { \"form-radio-group-container--default\": !renderOption },\r\n          className,\r\n        )}\r\n      >\r\n        {radioGroupLabel && (\r\n          <HeadlessRadioGroup.Label className=\"radio-main-label\">\r\n            {radioGroupLabel}\r\n          </HeadlessRadioGroup.Label>\r\n        )}\r\n\r\n        {dataList.map((data, index) => {\r\n          const isDisabled = checkOptionDisable?.(data, index);\r\n          return (\r\n            <HeadlessRadioGroup.Option\r\n              value={getValue(data)}\r\n              key={index}\r\n              className={cx(\r\n                \"radio-container\",\r\n                { \"radio-container--disabled\": isDisabled },\r\n                itemClassName,\r\n                itemClassNameGetter?.(data, index),\r\n              )}\r\n              disabled={isDisabled}\r\n            >\r\n              {({ checked, active, disabled }) => {\r\n                const option = { data, index, checked, active, disabled };\r\n                return (\r\n                  renderOption?.(option) ?? (\r\n                    <>\r\n                      {leftLabel && renderRadioLabel(getLabel?.(option))}\r\n\r\n                      <div\r\n                        className={cx(\r\n                          \"form-radio-group__radio\",\r\n                          `form-radio-group__radio--${status}`,\r\n                          { \"form-radio-group__radio--checked\": checked },\r\n                          { \"form-radio-group__radio--active\": active },\r\n                          { \"form-radio-group__radio--disabled\": disabled },\r\n                        )}\r\n                      >\r\n                        <div className=\"inner\" />\r\n                      </div>\r\n\r\n                      {!leftLabel && renderRadioLabel(getLabel?.(option))}\r\n\r\n                      {getDescription && (\r\n                        <HeadlessRadioGroup.Description>\r\n                          {getDescription(option)}\r\n                        </HeadlessRadioGroup.Description>\r\n                      )}\r\n                    </>\r\n                  )\r\n                );\r\n              }}\r\n            </HeadlessRadioGroup.Option>\r\n          );\r\n        })}\r\n      </HeadlessRadioGroup>\r\n    );\r\n  };\r\n\r\n  if (!formValidation) {\r\n    return renderContent();\r\n  }\r\n\r\n  const { control, name, rules } = formValidation;\r\n  // TODO: Figure out this ignore\r\n  return (\r\n    <Controller\r\n      // @ts-ignore\r\n      name={name}\r\n      rules={rules}\r\n      control={control}\r\n      // @ts-ignore\r\n      defaultValue={value}\r\n      render={({ field: { onChange } }) => renderContent(onChange)}\r\n    />\r\n  );\r\n}\r\n","export const clamp = (min: number, max: number, actual: number): number =>\r\n  Math.max(min, Math.min(max, actual));\r\n","import React, { FC } from \"react\";\nimport \"./components/main/index.scss\";\nimport \"./components/main/theme.scss\";\nimport { initializeIconList } from \"./utils/iconInit\";\n\ninitializeIconList();\n\nexport * from \"./components\";\n\nexport const Thing: FC = ({ children }) => {\n  return (\n    <div className=\"flex items-center justify-center w-5/6 m-auto py-2 text-2xl text-center text-skin-success uppercase bg-skin-top shadow-xl rounded-3xl\">\n      {children || \"Hello World! (❁´◡`❁)\"}\n    </div>\n  );\n};\n"],"names":["Icon","forwardRef","ref","icon","className","faProps","React","cx","FontAwesomeIcon","Button","borderType","colorType","iconClassName","isLoading","isRounded","withBackground","loadingIcon","buttonProps","spin","children","now","Date","getTime","headlessTransitionData","Math","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","FadeTransition","as","Transition","Fragment","show","Input","caption","captionIcon","state","label","leadingAdornment","leadingAdornmentOnClick","trailingAdornment","traillingAdornmentOnClick","debounceParam","inputProps","myId","useRef","nanoid","hasError","debounceRef","func","wait","options","lastArgs","lastThis","result","timerId","lastCallTime","invokeFunc","time","args","thisArg","undefined","apply","leadingEdge","setTimeout","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","arguments","this","cancel","clearTimeout","flush","debounce","event","onChange","debounceTime","useState","hasContent","setHasContent","renderAdornment","adornment","left","prop","iconCN","onClick","Array","isArray","length","every","entry","renderIcon","type","useEffect","value","defaultValue","placeholder","debouncer","current","flushOnUnmount","readOnly","htmlFor","id","target","library","add","faHandPeace","faDog","faCat","faSpinner","faHeart","text","status","attemptDefaultIndex","itemClassName","itemClassNameGetter","dataList","getValue","radioGroupLabel","defaultSelectedIndex","selectedIndex","disabled","renderOption","checkOptionDisable","getLabel","getDescription","leftLabel","formValidation","max","min","findIndex","index","_selectedIndex","setSelectedIndex","dataMap","useMemo","returnMap","forEach","data","renderContent","formOnChange","renderRadioLabel","HeadlessRadioGroup","Label","newValue","map","isDisabled","Option","key","checked","active","option","Description","Controller","name","rules","control","render","field"],"mappings":"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"}